[{"path":[]},{"path":"https://r-lib.github.io/xmlparsedata/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 xmlparsedata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gábor Csárdi. Author, maintainer. . Copyright holder, funder. Mango Solutions. Copyright holder, funder.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Csárdi G (2024). xmlparsedata: Parse Data 'R' Code 'XML' Tree. R package version 1.0.5.9000, https://r-lib.github.io/xmlparsedata/, https://github.com/r-lib/xmlparsedata#readme.","code":"@Manual{,   title = {xmlparsedata: Parse Data of 'R' Code as an 'XML' Tree},   author = {Gábor Csárdi},   year = {2024},   note = {R package version 1.0.5.9000,     https://r-lib.github.io/xmlparsedata/},   url = {https://github.com/r-lib/xmlparsedata#readme}, }"},{"path":"https://r-lib.github.io/xmlparsedata/dev/index.html","id":"xmlparsedata","dir":"","previous_headings":"","what":"Parse Data of R Code as an XML Tree","title":"Parse Data of R Code as an XML Tree","text":"Parse Data R Code ‘XML’ Tree Convert output ‘utils::getParseData()’ ‘XML’ tree, searchable easier manipulate general. Installation Introduction utils::getParseData() xml_parse_data() Renaming tokens Search parse tree xml2 License","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parse Data of R Code as an XML Tree","text":"Stable version: Development version:","code":"install.packages(\"xmlparsedata\") pak::pak(\"r-lib/zip\")"},{"path":[]},{"path":"https://r-lib.github.io/xmlparsedata/dev/index.html","id":"introduction","dir":"","previous_headings":"Usage","what":"Introduction","title":"Parse Data of R Code as an XML Tree","text":"recent R versions parser can attach source code location information parsed expressions. information often useful static analysis, e.g. code linting. can accessed via utils::getParseData() function. xmlparsedata converts information XML tree. R parser’s token names preserved XML much possible, valid XML tag names, renamed, see .","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/index.html","id":"utilsgetparsedata","dir":"","previous_headings":"Usage","what":"utils::getParseData()","title":"Parse Data of R Code as an XML Tree","text":"utils::getParseData() summarizes parse information data frame. data frame one row per expression tree node, node points parent. small example:","code":"p <- parse(   text = \"function(a = 1, b = 2) { \\n  a + b\\n}\\n\",   keep.source = TRUE   ) getParseData(p) #>    line1 col1 line2 col2 id parent          token terminal     text #> 33     1    1     3    1 33      0           expr    FALSE          #> 1      1    1     1    8  1     33       FUNCTION     TRUE function #> 2      1    9     1    9  2     33            '('     TRUE        ( #> 3      1   10     1   10  3     33 SYMBOL_FORMALS     TRUE        a #> 4      1   12     1   12  4     33     EQ_FORMALS     TRUE        = #> 5      1   14     1   14  5      6      NUM_CONST     TRUE        1 #> 6      1   14     1   14  6     33           expr    FALSE          #> 7      1   15     1   15  7     33            ','     TRUE        , #> 10     1   17     1   17 10     33 SYMBOL_FORMALS     TRUE        b #> 11     1   19     1   19 11     33     EQ_FORMALS     TRUE        = #> 12     1   21     1   21 12     13      NUM_CONST     TRUE        2 #> 13     1   21     1   21 13     33           expr    FALSE          #> 14     1   22     1   22 14     33            ')'     TRUE        ) #> 30     1   24     3    1 30     33           expr    FALSE          #> 17     1   24     1   24 17     30            '{'     TRUE        { #> 25     2    3     2    7 25     30           expr    FALSE          #> 19     2    3     2    3 19     21         SYMBOL     TRUE        a #> 21     2    3     2    3 21     25           expr    FALSE          #> 20     2    5     2    5 20     25            '+'     TRUE        + #> 22     2    7     2    7 22     24         SYMBOL     TRUE        b #> 24     2    7     2    7 24     25           expr    FALSE          #> 28     3    1     3    1 28     30            '}'     TRUE        }"},{"path":"https://r-lib.github.io/xmlparsedata/dev/index.html","id":"xml_parse_data","dir":"","previous_headings":"Usage","what":"xml_parse_data()","title":"Parse Data of R Code as an XML Tree","text":"xmlparsedata::xml_parse_data() converts parse information XML document. works similarly getParseData(). Specify pretty = TRUE option pretty-indent XML output. Note small overhead, parsing large files, suggest omit . top XML tag <exprlist>, list expressions, expression <expr> tag. tag attributes define location: line1, col1, line2, col2. getParseData() data frame column names.","code":"library(xmlparsedata) xml <- xml_parse_data(p, pretty = TRUE) cat(xml) #> <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?> #> <exprlist> #>   <expr line1=\"1\" col1=\"1\" line2=\"3\" col2=\"1\" start=\"26\" end=\"76\"> #>     <FUNCTION line1=\"1\" col1=\"1\" line2=\"1\" col2=\"8\" start=\"26\" end=\"33\">function<\/FUNCTION> #>     <OP-LEFT-PAREN line1=\"1\" col1=\"9\" line2=\"1\" col2=\"9\" start=\"34\" end=\"34\">(<\/OP-LEFT-PAREN> #>     <SYMBOL_FORMALS line1=\"1\" col1=\"10\" line2=\"1\" col2=\"10\" start=\"35\" end=\"35\">a<\/SYMBOL_FORMALS> #>     <EQ_FORMALS line1=\"1\" col1=\"12\" line2=\"1\" col2=\"12\" start=\"37\" end=\"37\">=<\/EQ_FORMALS> #>     <expr line1=\"1\" col1=\"14\" line2=\"1\" col2=\"14\" start=\"39\" end=\"39\"> #>       <NUM_CONST line1=\"1\" col1=\"14\" line2=\"1\" col2=\"14\" start=\"39\" end=\"39\">1<\/NUM_CONST> #>     <\/expr> #>     <OP-COMMA line1=\"1\" col1=\"15\" line2=\"1\" col2=\"15\" start=\"40\" end=\"40\">,<\/OP-COMMA> #>     <SYMBOL_FORMALS line1=\"1\" col1=\"17\" line2=\"1\" col2=\"17\" start=\"42\" end=\"42\">b<\/SYMBOL_FORMALS> #>     <EQ_FORMALS line1=\"1\" col1=\"19\" line2=\"1\" col2=\"19\" start=\"44\" end=\"44\">=<\/EQ_FORMALS> #>     <expr line1=\"1\" col1=\"21\" line2=\"1\" col2=\"21\" start=\"46\" end=\"46\"> #>       <NUM_CONST line1=\"1\" col1=\"21\" line2=\"1\" col2=\"21\" start=\"46\" end=\"46\">2<\/NUM_CONST> #>     <\/expr> #>     <OP-RIGHT-PAREN line1=\"1\" col1=\"22\" line2=\"1\" col2=\"22\" start=\"47\" end=\"47\">)<\/OP-RIGHT-PAREN> #>     <expr line1=\"1\" col1=\"24\" line2=\"3\" col2=\"1\" start=\"49\" end=\"76\"> #>       <OP-LEFT-BRACE line1=\"1\" col1=\"24\" line2=\"1\" col2=\"24\" start=\"49\" end=\"49\">{<\/OP-LEFT-BRACE> #>       <expr line1=\"2\" col1=\"3\" line2=\"2\" col2=\"7\" start=\"53\" end=\"57\"> #>         <expr line1=\"2\" col1=\"3\" line2=\"2\" col2=\"3\" start=\"53\" end=\"53\"> #>           <SYMBOL line1=\"2\" col1=\"3\" line2=\"2\" col2=\"3\" start=\"53\" end=\"53\">a<\/SYMBOL> #>         <\/expr> #>         <OP-PLUS line1=\"2\" col1=\"5\" line2=\"2\" col2=\"5\" start=\"55\" end=\"55\">+<\/OP-PLUS> #>         <expr line1=\"2\" col1=\"7\" line2=\"2\" col2=\"7\" start=\"57\" end=\"57\"> #>           <SYMBOL line1=\"2\" col1=\"7\" line2=\"2\" col2=\"7\" start=\"57\" end=\"57\">b<\/SYMBOL> #>         <\/expr> #>       <\/expr> #>       <OP-RIGHT-BRACE line1=\"3\" col1=\"1\" line2=\"3\" col2=\"1\" start=\"76\" end=\"76\">}<\/OP-RIGHT-BRACE> #>     <\/expr> #>   <\/expr> #> <\/exprlist>"},{"path":"https://r-lib.github.io/xmlparsedata/dev/index.html","id":"renaming-some-tokens","dir":"","previous_headings":"Usage","what":"Renaming some tokens","title":"Parse Data of R Code as an XML Tree","text":"R parser’s token names preserved XML much possible, valid XML tag names, renamed, see xml_parse_token_map vector mapping:","code":"xml_parse_token_map #>                '?'                '~{'                '}'                ')'  #>     \"OP-SEMICOLON\"    \"OP-LEFT-BRACE\"   \"OP-RIGHT-BRACE\"   \"OP-RIGHT-PAREN\"  #>                '!'                ']'                ','             '\\\\\\\\'  #>   \"OP-EXCLAMATION\" \"OP-RIGHT-BRACKET\"         \"OP-COMMA\"        \"OP-LAMBDA\""},{"path":"https://r-lib.github.io/xmlparsedata/dev/index.html","id":"search-the-parse-tree-with-xml2","dir":"","previous_headings":"Usage","what":"Search the parse tree with xml2","title":"Parse Data of R Code as an XML Tree","text":"xml2 package can search XML documents using XPath expressions. often useful search specific code patterns. example search source file base R 1:nrow(<expr>) expressions, usually unsafe, nrow() might zero, expression equivalent 1:0, .e. c(1, 0), usually intended behavior. load parse file directly R source code mirror https://github.com/wch/r-source: convert XML tree: 1:nrow(<expr>) expression corresponds following tree R: translates following XPath expression (ignoring last tree tokens length(expr) expressions): can search subtree xml2::xml_find_all(): one hit, line 334:","code":"url <- paste0(   \"https://raw.githubusercontent.com/wch/r-source/\",   \"4fc93819fc7401b8695ce57a948fe163d4188f47/src/library/tools/R/xgettext.R\" ) src <- readLines(url) p <- parse(text = src, keep.source = TRUE) library(xml2) xml <- read_xml(xml_parse_data(p)) <expr>   +-- <expr>     +-- NUM_CONST: 1   +-- ':'   +-- <expr>     +-- <expr>       +-- SYMBOL_FUNCTION_CALL nrow     +-- '('     +-- <expr>     +-- ')' bad <- xml_parse_data(   parse(text = \"1:nrow(expr)\", keep.source = TRUE),   pretty = TRUE ) cat(bad) #> <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?> #> <exprlist> #>   <expr line1=\"1\" col1=\"1\" line2=\"1\" col2=\"12\" start=\"14\" end=\"25\"> #>     <expr line1=\"1\" col1=\"1\" line2=\"1\" col2=\"1\" start=\"14\" end=\"14\"> #>       <NUM_CONST line1=\"1\" col1=\"1\" line2=\"1\" col2=\"1\" start=\"14\" end=\"14\">1<\/NUM_CONST> #>     <\/expr> #>     <OP-COLON line1=\"1\" col1=\"2\" line2=\"1\" col2=\"2\" start=\"15\" end=\"15\">:<\/OP-COLON> #>     <expr line1=\"1\" col1=\"3\" line2=\"1\" col2=\"12\" start=\"16\" end=\"25\"> #>       <expr line1=\"1\" col1=\"3\" line2=\"1\" col2=\"6\" start=\"16\" end=\"19\"> #>         <SYMBOL_FUNCTION_CALL line1=\"1\" col1=\"3\" line2=\"1\" col2=\"6\" start=\"16\" end=\"19\">nrow<\/SYMBOL_FUNCTION_CALL> #>       <\/expr> #>       <OP-LEFT-PAREN line1=\"1\" col1=\"7\" line2=\"1\" col2=\"7\" start=\"20\" end=\"20\">(<\/OP-LEFT-PAREN> #>       <expr line1=\"1\" col1=\"8\" line2=\"1\" col2=\"11\" start=\"21\" end=\"24\"> #>         <SYMBOL line1=\"1\" col1=\"8\" line2=\"1\" col2=\"11\" start=\"21\" end=\"24\">expr<\/SYMBOL> #>       <\/expr> #>       <OP-RIGHT-PAREN line1=\"1\" col1=\"12\" line2=\"1\" col2=\"12\" start=\"25\" end=\"25\">)<\/OP-RIGHT-PAREN> #>     <\/expr> #>   <\/expr> #> <\/exprlist> xp <- paste0(   \"//expr\",      \"[expr[NUM_CONST[text()='1']]]\",      \"[OP-COLON]\",      \"[expr[expr[SYMBOL_FUNCTION_CALL[text()='nrow']]]]\" ) bad_nrow <- xml_find_all(xml, xp) bad_nrow #> {xml_nodeset (1)} #> [1] <expr line1=\"334\" col1=\"19\" line2=\"334\" col2=\"27\" start=\"38763\" end=\"3877 ... cbind(332:336, src[332:336]) #>      [,1]  [,2]                                            #> [1,] \"332\" \"\\tcat(\\\"No errors\\\\n\\\")\"                       #> [2,] \"333\" \"    else\"                                      #> [3,] \"334\" \"\\tfor (i in 1:nrow(x)) {\"                      #> [4,] \"335\" \"\\t    if (is.na(x[i, 2L])) cols <- c(1L, 3:5)\" #> [5,] \"336\" \"\\t    else cols <- 1:5\""},{"path":"https://r-lib.github.io/xmlparsedata/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Parse Data of R Code as an XML Tree","text":"Please note xmlparsedata project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Parse Data of R Code as an XML Tree","text":"MIT © Mango Solutions, RStudio","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/expr_as_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an XML representation of an expression — expr_as_xml","title":"Get an XML representation of an expression — expr_as_xml","text":"Get XML representation expression","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/expr_as_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an XML representation of an expression — expr_as_xml","text":"","code":"expr_as_xml(expr)"},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/expr_as_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an XML representation of an expression — expr_as_xml","text":"expr expression.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/xml_parse_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert R parse data to XML — xml_parse_data","title":"Convert R parse data to XML — xml_parse_data","text":"recent R versions parser can attach source code location information parsed expressions. information often useful static analysis, e.g. code linting. can accessed via utils::getParseData() function.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/xml_parse_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert R parse data to XML — xml_parse_data","text":"","code":"xml_parse_data(x, includeText = NA, pretty = FALSE)"},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/xml_parse_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert R parse data to XML — xml_parse_data","text":"x expression returned parse, function     object source reference information includeText logical; whether include text parsed items result pretty Whether pretty-indent XML output. small overhead probably matters large source files.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/xml_parse_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert R parse data to XML — xml_parse_data","text":"XML string representing parse data. See details .","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/xml_parse_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert R parse data to XML — xml_parse_data","text":"xml_parse_data() converts information XML tree. R parser's token names preserved XML much possible, valid XML tag names, renamed, see xml_parse_token_map vector mapping. top XML tag <exprlist>, list expressions, expression <expr> tag. tag attributes define location: line1, col1, line2, col2. getParseData() data frame column names. Next, two attributes, start end, can used ordering expressions document. Note values correlated (cases may match exactly) positions document, relied upon. See example . See also README https://github.com/r-lib/xmlparsedata#readme examples search XML tree xml2 package XPath expressions. Note xml_parse_data() silently drops control characters (0x01-0x1f) input, except horizontal tab (0x09) newline (0x0a), invalid XML 1.0.","code":""},{"path":[]},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/xml_parse_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert R parse data to XML — xml_parse_data","text":"","code":"code <- \"function(a = 1, b = 2) {\\n  a + b\\n}\\n\" expr <- parse(text = code, keep.source = TRUE)  # The base R way: getParseData(expr) #>    line1 col1 line2 col2 id parent          token terminal     text #> 33     1    1     3    1 33      0           expr    FALSE          #> 1      1    1     1    8  1     33       FUNCTION     TRUE function #> 2      1    9     1    9  2     33            '('     TRUE        ( #> 3      1   10     1   10  3     33 SYMBOL_FORMALS     TRUE        a #> 4      1   12     1   12  4     33     EQ_FORMALS     TRUE        = #> 5      1   14     1   14  5      6      NUM_CONST     TRUE        1 #> 6      1   14     1   14  6     33           expr    FALSE          #> 7      1   15     1   15  7     33            ','     TRUE        , #> 10     1   17     1   17 10     33 SYMBOL_FORMALS     TRUE        b #> 11     1   19     1   19 11     33     EQ_FORMALS     TRUE        = #> 12     1   21     1   21 12     13      NUM_CONST     TRUE        2 #> 13     1   21     1   21 13     33           expr    FALSE          #> 14     1   22     1   22 14     33            ')'     TRUE        ) #> 30     1   24     3    1 30     33           expr    FALSE          #> 17     1   24     1   24 17     30            '{'     TRUE        { #> 25     2    3     2    7 25     30           expr    FALSE          #> 19     2    3     2    3 19     21         SYMBOL     TRUE        a #> 21     2    3     2    3 21     25           expr    FALSE          #> 20     2    5     2    5 20     25            '+'     TRUE        + #> 22     2    7     2    7 22     24         SYMBOL     TRUE        b #> 24     2    7     2    7 24     25           expr    FALSE          #> 28     3    1     3    1 28     30            '}'     TRUE        }  cat(xml_parse_data(expr, pretty = TRUE)) #> <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?> #> <exprlist> #>   <expr line1=\"1\" col1=\"1\" line2=\"3\" col2=\"1\" start=\"26\" end=\"76\"> #>     <FUNCTION line1=\"1\" col1=\"1\" line2=\"1\" col2=\"8\" start=\"26\" end=\"33\">function<\/FUNCTION> #>     <OP-LEFT-PAREN line1=\"1\" col1=\"9\" line2=\"1\" col2=\"9\" start=\"34\" end=\"34\">(<\/OP-LEFT-PAREN> #>     <SYMBOL_FORMALS line1=\"1\" col1=\"10\" line2=\"1\" col2=\"10\" start=\"35\" end=\"35\">a<\/SYMBOL_FORMALS> #>     <EQ_FORMALS line1=\"1\" col1=\"12\" line2=\"1\" col2=\"12\" start=\"37\" end=\"37\">=<\/EQ_FORMALS> #>     <expr line1=\"1\" col1=\"14\" line2=\"1\" col2=\"14\" start=\"39\" end=\"39\"> #>       <NUM_CONST line1=\"1\" col1=\"14\" line2=\"1\" col2=\"14\" start=\"39\" end=\"39\">1<\/NUM_CONST> #>     <\/expr> #>     <OP-COMMA line1=\"1\" col1=\"15\" line2=\"1\" col2=\"15\" start=\"40\" end=\"40\">,<\/OP-COMMA> #>     <SYMBOL_FORMALS line1=\"1\" col1=\"17\" line2=\"1\" col2=\"17\" start=\"42\" end=\"42\">b<\/SYMBOL_FORMALS> #>     <EQ_FORMALS line1=\"1\" col1=\"19\" line2=\"1\" col2=\"19\" start=\"44\" end=\"44\">=<\/EQ_FORMALS> #>     <expr line1=\"1\" col1=\"21\" line2=\"1\" col2=\"21\" start=\"46\" end=\"46\"> #>       <NUM_CONST line1=\"1\" col1=\"21\" line2=\"1\" col2=\"21\" start=\"46\" end=\"46\">2<\/NUM_CONST> #>     <\/expr> #>     <OP-RIGHT-PAREN line1=\"1\" col1=\"22\" line2=\"1\" col2=\"22\" start=\"47\" end=\"47\">)<\/OP-RIGHT-PAREN> #>     <expr line1=\"1\" col1=\"24\" line2=\"3\" col2=\"1\" start=\"49\" end=\"76\"> #>       <OP-LEFT-BRACE line1=\"1\" col1=\"24\" line2=\"1\" col2=\"24\" start=\"49\" end=\"49\">{<\/OP-LEFT-BRACE> #>       <expr line1=\"2\" col1=\"3\" line2=\"2\" col2=\"7\" start=\"53\" end=\"57\"> #>         <expr line1=\"2\" col1=\"3\" line2=\"2\" col2=\"3\" start=\"53\" end=\"53\"> #>           <SYMBOL line1=\"2\" col1=\"3\" line2=\"2\" col2=\"3\" start=\"53\" end=\"53\">a<\/SYMBOL> #>         <\/expr> #>         <OP-PLUS line1=\"2\" col1=\"5\" line2=\"2\" col2=\"5\" start=\"55\" end=\"55\">+<\/OP-PLUS> #>         <expr line1=\"2\" col1=\"7\" line2=\"2\" col2=\"7\" start=\"57\" end=\"57\"> #>           <SYMBOL line1=\"2\" col1=\"7\" line2=\"2\" col2=\"7\" start=\"57\" end=\"57\">b<\/SYMBOL> #>         <\/expr> #>       <\/expr> #>       <OP-RIGHT-BRACE line1=\"3\" col1=\"1\" line2=\"3\" col2=\"1\" start=\"76\" end=\"76\">}<\/OP-RIGHT-BRACE> #>     <\/expr> #>   <\/expr> #> <\/exprlist>"},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/xml_parse_token_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Map token names of the R parser to token names in xml_parse_data() — xml_parse_token_map","title":"Map token names of the R parser to token names in xml_parse_data() — xml_parse_token_map","text":"R token names valid XML tag names, xml_parse_data() needs replace create valid XML file.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/xml_parse_token_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map token names of the R parser to token names in xml_parse_data() — xml_parse_token_map","text":"","code":"xml_parse_token_map"},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/xml_parse_token_map.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Map token names of the R parser to token names in xml_parse_data() — xml_parse_token_map","text":"object class character length 20.","code":""},{"path":[]},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/xmlparsedata-package.html","id":null,"dir":"Reference","previous_headings":"","what":"xmlparsedata: Parse Data of 'R' Code as an 'XML' Tree — xmlparsedata-package","title":"xmlparsedata: Parse Data of 'R' Code as an 'XML' Tree — xmlparsedata-package","text":"Convert output 'utils::getParseData()' 'XML' tree, one can search via 'XPath', easier manipulate general.","code":""},{"path":[]},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/xmlparsedata-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"xmlparsedata: Parse Data of 'R' Code as an 'XML' Tree — xmlparsedata-package","text":"Maintainer: Gábor Csárdi csardi.gabor@gmail.com contributors: Posit Software, PBC [copyright holder, funder] Mango Solutions [copyright holder, funder]","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/reference/xmlparsedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Data of R Code as an 'XML' Tree — xmlparsedata","title":"Parse Data of R Code as an 'XML' Tree — xmlparsedata","text":"Convert output 'utils::getParseData()' 'XML' tree, searchable easier manipulate general.","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/news/index.html","id":"xmlparsedata-105","dir":"Changelog","previous_headings":"","what":"xmlparsedata 1.0.5","title":"xmlparsedata 1.0.5","text":"CRAN release: 2021-03-06 Translate \\ lambda expression OP-LAMBDA (#18 @renkun-ken). Drop control characters, except horizontal tab newline (#19).","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/news/index.html","id":"xmlparsedata-104","dir":"Changelog","previous_headings":"","what":"xmlparsedata 1.0.4","title":"xmlparsedata 1.0.4","text":"CRAN release: 2020-08-31 Translate ] tokens OP-RIGHT-BRACKET instead OP-RIGHT-BRACE (#11 @AshesITR). xml_parse_data() now works includeText = FALSE (#14 @renkun-ken).","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/news/index.html","id":"xmlparsedata-103","dir":"Changelog","previous_headings":"","what":"xmlparsedata 1.0.3","title":"xmlparsedata 1.0.3","text":"CRAN release: 2019-09-27 Ensure closing xml-tags code expressions end position file respect start-first-end-last ordering produced xml. Ensures new equal_assign token getParseData() R-3.6 handled appropriately. #5 @russHyde","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/news/index.html","id":"xmlparsedata-102","dir":"Changelog","previous_headings":"","what":"xmlparsedata 1.0.2","title":"xmlparsedata 1.0.2","text":"CRAN release: 2018-09-17 Remove control characters \\003, \\007, \\010, \\027, allowed XML 1.0, #1 @GregoireGauriot Always convert parsed text UTF-8","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/news/index.html","id":"xmlparsedata-101","dir":"Changelog","previous_headings":"","what":"xmlparsedata 1.0.1","title":"xmlparsedata 1.0.1","text":"CRAN release: 2016-06-18 Fix bug input already getParseData() data frame. https://github.com/jimhester/lintr filters parsed data include individual functions , filters data frame, underlying srcrefs, call getParseData() data frame , get data whole source file. fixed now noticing input already data frame","code":""},{"path":"https://r-lib.github.io/xmlparsedata/dev/news/index.html","id":"xmlparsedata-100","dir":"Changelog","previous_headings":"","what":"xmlparsedata 1.0.0","title":"xmlparsedata 1.0.0","text":"CRAN release: 2016-05-20 First public release.","code":""}]
